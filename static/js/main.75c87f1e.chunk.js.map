{"version":3,"sources":["components/rest/star.png","components/rest/SingleRest.js","components/rest/Location.js","components/rest/RestData.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","SingleRest","item","className","id","name","rating","icon","faStar","size","color","location","address1","city","state","href","url","target","src","image_url","alt","alias","findLocation","navigator","geolocation","getCurrentPosition","position","parseInt","document","getElementById","setAttribute","coords","latitude","longitude","markOne","markTwo","markThree","markFour","markFive","centerMap","lat","lng","zoomMap","RestData","props","hiddenState","setState","prevState","hidden","toggleHidden","e","preventDefault","result","value","getAttribute","long","setTimeout","waitForData","parseFloat","restData","submit","WrappedMap","withScriptjs","withGoogleMap","Map","sorter","this","getData","zoom","center","key","title","onClick","window","open","data","onclick","click","sort","axios","get","headers","Authorization","process","params","term","sort_by","then","response","businesses","setMarkers","catch","error","console","log","map","googleMapURL","loadingElement","style","height","containerElement","mapElement","display","renderItems","Component","App","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.75c87f1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star.b90c8463.png\";","\r\n// The purpose of this JavaScript file is to create a uniform design for the display of each businesses' information and image.\r\n\r\nimport React from 'react'\r\nimport \"./SingleRest.css\"\r\nimport \"./star.png\"\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// The SingleRest constant contains an arrow function which contains much HTML code that will be used in the RestData.js file and therefore in the DOM. \r\n\r\n// The HTML below displays each location's name, rating along with a star from FontAwesome, as well as their printed address and a link to their Yelp page.\r\n// An image of each location provided by the YELP API is also provided to the left of all of this information.\r\nconst SingleRest = ({item}) => (\r\n\r\n    <div>\r\n        <div className=\"restContainer\">\r\n            <h2 className=\"locInfo\" id=\"name\">{item.name}</h2>\r\n            <h3 className=\"locInfo\" id=\"rat\">{item.rating} <FontAwesomeIcon name=\"star\" className=\"star\" icon={faStar} size=\"lg\" color=\"#ffbc30\"/></h3>\r\n            <h4 className=\"locInfo\" id=\"loc\">{\"  \" + item.location.address1 + \", \" + item.location.city + \", \" + item.location.state}</h4>\r\n            <a href={item.url} target=\"_blank\"> Find out more here!</a>\r\n        </div>\r\n        <div className=\"picContainer\">\r\n            <img className=\"restPic\" src={item.image_url} alt={item.alias}></img>\r\n            </div>\r\n    </div>\r\n)\r\n\r\nexport default SingleRest;","\r\n// This JavaScript file is responsible for getting the user's current location with HTML Geolocation.\r\n\r\n// The findLocation() function is exported as to be used in larger pieces of JavaScript.\r\n\r\nexport function findLocation() {\r\n\r\n    if (navigator.geolocation) {\r\n        \r\n        /* This function uses a callback function to get a user's location. It then stores this longitude and latitude information in the hidden\r\n        html DOM elements in index.html*/\r\n        navigator.geolocation.getCurrentPosition(function(position) {\r\n            parseInt(document.getElementById(\"userLat\").setAttribute(\"text\", position.coords.latitude));\r\n            parseInt(document.getElementById(\"userLong\").setAttribute(\"text\", position.coords.longitude));\r\n        }\r\n        )}\r\n};\r\n\r\n","\r\n// The purpose of this JavaScript file is to do most of the necessary operations to make the web app work.\r\n\r\nimport React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport './RestData.css';\r\nimport SingleRest from './SingleRest'\r\nimport {findLocation} from './Location'\r\nimport {GoogleMap, withScriptjs, withGoogleMap, Marker} from 'react-google-maps'\r\n\r\n// The markers on the map are being initializied to a remote location.\r\n\r\nvar markOne = [{\"id\":0, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\nvar markTwo = [{\"id\":1, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\nvar markThree = [{\"id\":2, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\nvar markFour = [{\"id\":3, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\nvar markFive = [{\"id\":4, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\n// The initial center of the map is set to the center of the United States.\r\n\r\nvar centerMap = {lat: 39.828175, lng: -98.5795}\r\n\r\n// The initial zoom of the map is set to 3 as to see the entire country upon loading the website.\r\n\r\nvar zoomMap = 3;\r\n\r\n// Beginning the RestData react component.\r\n\r\nclass RestData extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n\r\n            // restData will hold the business information gathered from the YELP API.\r\n            restData: [], \r\n\r\n            // result will hold the input from the user from the text entry field.\r\n            result: \"\",\r\n\r\n            // submit will hold the DOM element of the submit button for the text entry field. \r\n            submit: document.getElementById(\"submit\"), \r\n\r\n            // hidden will decide whether the business data should be revealed to the user or not.\r\n            hidden: true,\r\n\r\n            // lat holds the latitude coordinate of the user.\r\n            lat: 38.924110,\r\n\r\n            // long holds the longitude coordinate of the user. \r\n            long: -77.213120,\r\n\r\n            // Wrapped Map allows the Google Maps API to work with JavaScript.\r\n            WrappedMap: withScriptjs(withGoogleMap(this.Map)),\r\n\r\n            // sorter holds the initial sorting option.\r\n            sorter: \"best_match\"\r\n    }\r\n\r\n}\r\n\r\n// The hiddenState method controls whether the business information is displayed through changing the state of the hidden state.\r\nhiddenState = () => {\r\n    \r\n    this.setState(prevState => ({\r\n        hidden: false\r\n    }))\r\n}\r\n\r\n// The waitForData method is an asynchronous method that waits for the getData function to execute before continuing.\r\n// This is a helper method that is used to support larger methods in this class.\r\nasync waitForData() {\r\n\r\n    await this.getData();\r\n\r\n}\r\n\r\n/* The Map method creates the Google Maps API object. It establishes a zoom and center with the variables initialized outside of this class,\r\nand then it defines multiple markers using the variables initialized outside of this class.*/\r\n\r\nMap () {\r\n    \r\n    return (\r\n    \r\n    <div><GoogleMap \r\n\r\n    zoom={zoomMap} \r\n    center={centerMap}\r\n    >  \r\n\r\n    </GoogleMap>\r\n\r\n    <Marker\r\n        key={markOne[0][\"id\"]}\r\n        position ={{\r\n            lat: markOne[0][\"coordinates\"][\"latitude\"],\r\n            lng: markOne[0][\"coordinates\"][\"longitude\"]\r\n        }}\r\n        title = {markOne[0][\"name\"]}  \r\n        onClick = {() => {window.open(markOne[0]['url'])}} \r\n        icon = \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\"  \r\n        ></Marker>\r\n\r\n        <Marker\r\n        key={markTwo[0][\"id\"]}\r\n        position ={{\r\n            lat: markTwo[0][\"coordinates\"][\"latitude\"],\r\n            lng: markTwo[0][\"coordinates\"][\"longitude\"]\r\n        }}\r\n        title = {markTwo[0][\"name\"]} \r\n        onClick = {() => {window.open(markTwo[0]['url'])}}  \r\n        icon = \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\" \r\n        ></Marker>\r\n\r\n        <Marker\r\n        key={markThree[0][\"id\"]}\r\n        position ={{\r\n            lat: markThree[0][\"coordinates\"][\"latitude\"],\r\n            lng: markThree[0][\"coordinates\"][\"longitude\"]\r\n        }}\r\n        title = {markThree[0][\"name\"]}   \r\n        onClick = {() => {window.open(markThree[0]['url'])}}  \r\n        icon = \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\" \r\n        ></Marker>\r\n\r\n        <Marker\r\n        key={markFour[0][\"id\"]}\r\n        position ={{\r\n            lat: markFour[0][\"coordinates\"][\"latitude\"],\r\n            lng: markFour[0][\"coordinates\"][\"longitude\"]\r\n        }}\r\n        title = {markFour[0][\"name\"]}   \r\n        onClick = {() => {window.open(markFour[0]['url'])}}  \r\n        icon = \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\" \r\n        ></Marker>\r\n\r\n         <Marker\r\n        key={markFive[0][\"id\"]}\r\n        position ={{\r\n            lat: markFive[0][\"coordinates\"][\"latitude\"],\r\n            lng: markFive[0][\"coordinates\"][\"longitude\"]\r\n        }}\r\n        title = {markFive[0][\"name\"]}  \r\n        onClick = {() => {window.open(markFive[0]['url'])}}  \r\n        icon = \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\"  \r\n        ></Marker>\r\n\r\n        <Marker\r\n        key={\"userLocation\"}\r\n        position ={{\r\n            lat: parseFloat(document.getElementById(\"userLat\").getAttribute(\"text\")),\r\n            lng: parseFloat(document.getElementById(\"userLong\").getAttribute(\"text\"))\r\n        }}\r\n        title = \"You are here!\" \r\n        icon = \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\r\n        ></Marker>\r\n        </div>)\r\n}\r\n\r\n// The setMarkers method takes in the business data from the YELP API and uses the first five restaurants information to alter the Markers on the Google Maps object. \r\nsetMarkers(data) {\r\n\r\n    markOne = [data[0]];\r\n\r\n    markTwo = [data[1]];\r\n\r\n    if (data[2]) {\r\n\r\n    markThree = [data[2]];\r\n    }\r\n\r\n    if (data[3]) {\r\n    markFour = [data[3]];\r\n    }\r\n\r\n    if (data[4]) {\r\n        markFive = [data[4]];\r\n    }\r\n\r\n}\r\n\r\n// toggleHidden is activated when the submit button is hit.\r\n\r\ntoggleHidden = e => {\r\n\r\n    // This prevents the page from reloading whenever the submit button is hit.\r\n    e.preventDefault()\r\n\r\n    // The result state is updated to reflect the user's input into the text entry field.\r\n    this.setState(prevState => ({\r\n        result: document.getElementById(\"userInput\").value\r\n    }))\r\n\r\n    // The findLocation method is called in case their location has changed since their last time submitting a request.\r\n\r\n    findLocation();\r\n\r\n    // The latitude coordinate is updated to reflect what findLocation has changed in the DOM. \r\n\r\n    this.setState(prevState => ({\r\n        lat: document.getElementById(\"userLat\").getAttribute(\"text\")\r\n    }))\r\n\r\n    // The longitude coordinate is updated to reflect what findLocation has changed in the DOM. \r\n\r\n    this.setState(prevState => ({\r\n        long: document.getElementById(\"userLong\").getAttribute(\"text\")\r\n    }))\r\n\r\n    // A small timeout is established, as to give RestData enough time to accurately update the business information from the defaults.\r\n\r\n    setTimeout(this.hiddenState, 2000)\r\n\r\n    // waitForData is called to ensure that the correct business data is shown.\r\n\r\n    this.waitForData();\r\n\r\n    // The center of the map will be changed to the user's location.\r\n\r\n    centerMap = {lat: parseFloat(document.getElementById(\"userLat\").getAttribute(\"text\")), lng: parseFloat(document.getElementById(\"userLong\").getAttribute(\"text\"))}\r\n\r\n    // The markers will be reset back to zero, so that setMarkers can accurately redefine their locations based on the user's new request.\r\n\r\n    markOne = [{\"id\":0, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\n    markTwo = [{\"id\":1, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\n    markThree = [{\"id\":2, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\n    markFour = [{\"id\":3, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\n    markFive = [{\"id\":4, \"coordinates\":{\"latitude\":0, \"longitude\":0}}];\r\n\r\n    // The zoom value will be increased to 12 as to see where these local restaurants are.\r\n\r\n    zoomMap = 12;\r\n\r\n}\r\n\r\n// The sort method allows the dropdown selection menu to properly sort the data delivered to the user.\r\n\r\nsort() {\r\n\r\n    // If the user selects best match as their requested sort, this will change the state of sorter to best_match and hit the submit button.\r\n\r\n    var bestMatch = document.getElementById(\"bestMatch\")\r\n\r\n    bestMatch.onclick = () => {\r\n        this.setState(prevState => ({\r\n            sorter: \"best_match\"\r\n        }));\r\n\r\n        document.getElementById(\"submit\").click();\r\n    }\r\n\r\n    // If the user selects rating as their requested sort, this will change the state of sorter to rating and hit the submit button.\r\n    \r\n    var rating = document.getElementById(\"rating\")\r\n\r\n    rating.onclick = () => {\r\n        this.setState(prevState => ({\r\n            sorter: 'rating'\r\n        }));\r\n\r\n        document.getElementById(\"submit\").click();\r\n    }\r\n\r\n    // If the user selects distance as their requested sort, this will change the state of sorter to distance and hit the submit button.\r\n\r\n    var distance = document.getElementById(\"distance\")\r\n\r\n    distance.onclick = () => {\r\n        this.setState(prevState => ({\r\n            sorter: \"distance\"\r\n        }));\r\n\r\n        document.getElementById(\"submit\").click();\r\n        \r\n    }\r\n\r\n}\r\n\r\n// The getData method fetches data from the YELP API.\r\n\r\nasync getData() {\r\n\r\n    // This asynchronous method waits for the findLocation method to execute before fetching data. This is to prevent data from the default location being displayed.\r\n    \r\n    await findLocation()\r\n\r\n    // The data is sorted based on the user's request before the API call is made.\r\n\r\n    this.sort()\r\n\r\n    // Anytime the submit button is hit, toggleHidden is called. \r\n    \r\n    this.state.submit.onclick = this.toggleHidden\r\n\r\n    // Axios was used for the API call, with a herokuapp URL to prevent CORS from preventing app functionality.\r\n    \r\n    axios.get(`${'https://cors-anywhere.herokuapp.com/'}https://api.yelp.com/v3/businesses/search`, {\r\n\r\n    // The API key for YELP is stored in an environment variable.\r\n\r\n  headers: {\r\n    Authorization: `Bearer ${process.env.REACT_APP_API_KEY}`\r\n    },\r\n\r\n    // The result, latitude, longitude, and sorter states are used to make an accurate API call.\r\n\r\n    params: {\r\n        term: this.state.result,\r\n        latitude: this.state.lat,\r\n        longitude: this.state.long,\r\n        sort_by: this.state.sorter,\r\n    }\r\n    \r\n    })\r\n\r\n    // After the data is fetched with axios, the business results are then sent to the restData state array. \r\n    // setMarkers is also called to ensure that the markers are placed in the right locations.\r\n    .then((response) =>  {\r\n\r\n        this.setState({\r\n            restData: response.data.businesses\r\n        });\r\n\r\n        this.setMarkers(response.data.businesses)\r\n\r\n    })\r\n    \r\n    // In case any erros occur, this is meant to catch them and report them to the console for debugging. \r\n\r\n    .catch((error) => console.log(error));\r\n}\r\n\r\n// getData is called anytime the component is mounted to the site. \r\n\r\ncomponentDidMount() {\r\n\r\n    this.getData();\r\n    \r\n}\r\n\r\n// The renderItems method maps the businesses stored in the restData state array to individual SingleRest objects for displaying on the website.\r\nrenderItems() {\r\n\r\n    return this.state.restData.map((item) => (\r\n        <SingleRest key={item.url} item={item}/>\r\n\r\n    ))\r\n    \r\n}\r\n\r\n/* This render method returns the Wrapped Google Map with the Google Maps API key to the #root div. Please do not use my Google Maps API key, as \r\nit is my personal key and will be deactivated as soon as this project comes to a close. When this API key was placed into an environment variable, \r\nthe site would no longer function as designed. Whether the data is hidden, as well as the rendered data itself, is also placed into the #root div\r\nfrom this render method.*/\r\n\r\n    render() {\r\n        \r\n        return ( \r\n            <div>\r\n            <div className=\"map\">\r\n            <this.state.WrappedMap \r\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${\r\n                'AIzaSyBarhgnOifKoJbC0xF5srNBmzGp1PsAVcs'\r\n            }`}\r\n            loadingElement={<div style={{height:\"100%\"}} /> }\r\n            containerElement={<div style={{height:\"100%\"}} /> }\r\n            mapElement={<div style={{height:\"100%\"}} /> }\r\n            />\r\n            </div>\r\n            <div style={this.state.hidden ? {display:\"none\"} : {display:\"block\"}}> \r\n            <div className=\"data\">{this.renderItems()}</div>\r\n            </div>\r\n            </div>\r\n            \r\n    \r\n        )\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\nexport default RestData;\r\n\r\n","// The purpose of this JavaScript file is to render a RestData element into the #root div so that each of the other JavaScript files can do their jobs.\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport RestData from './rest/RestData'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    \n  return (\n    <div className=\"App\">\n      <header className=\"Title\">\n        \n\n        <RestData/>\n        \n      </header>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}